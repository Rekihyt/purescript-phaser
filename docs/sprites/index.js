// Generated by purs bundle 0.14.3
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];          
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];                 
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["composeKleisli"] = composeKleisli;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };

  exports.runFn3 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return fn(a, b, c);
        };
      };
    };
  };

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };

  exports.runFn5 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return fn(a, b, c, d, e);
            };
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn2"] = $foreign.runFn2;
  exports["runFn3"] = $foreign.runFn3;
  exports["runFn4"] = $foreign.runFn4;
  exports["runFn5"] = $foreign.runFn5;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];                 
  var Functor = function (map) {
      this.map = map;
  };
  exports["Functor"] = Functor;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
})(PS);
(function(exports) {
  "use strict";

  function create(config) {
    return function () {
      return new Phaser.Game(config);
    };
  }

  exports.create = create;

  exports.addSceneImpl = function (
    { key, init, create, update, preload, state },
    autoStart,
    game
  ) {
    return function () {
      const config = {
        init: function (data_) {
          init(this)(data_)();
        },
        preload: function () {
          preload(this)();
        },
        create: function (data_) {
          create(this)(data_)();
        },
        update: function () {
          update(this)();
        },
      };
      game.scene.add(key, config, autoStart, state);
      return game;
    };
  };
})(PS["Graphics.Phaser"] = PS["Graphics.Phaser"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Graphics.Phaser"] = $PS["Graphics.Phaser"] || {};
  var exports = $PS["Graphics.Phaser"];
  var $foreign = $PS["Graphics.Phaser"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];                
  var addScene = Data_Function_Uncurried.runFn3($foreign.addSceneImpl);
  exports["addScene"] = addScene;
  exports["create"] = $foreign.create;
})(PS);
(function(exports) {
  'use strict';

  exports.loadSpritesheetImpl = function (key, textureURL, config, scene) {
    return function () {
      scene.load.spritesheet(key, textureURL, config);

      return scene;
    };
  };
})(PS["Graphics.Phaser.Loader"] = PS["Graphics.Phaser.Loader"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Graphics.Phaser.Loader"] = $PS["Graphics.Phaser.Loader"] || {};
  var exports = $PS["Graphics.Phaser.Loader"];
  var $foreign = $PS["Graphics.Phaser.Loader"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];                        
  var loadSpritesheet = Data_Function_Uncurried.runFn4($foreign.loadSpritesheetImpl);
  exports["loadSpritesheet"] = loadSpritesheet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Graphics.Phaser.Scene"] = $PS["Graphics.Phaser.Scene"] || {};
  var exports = $PS["Graphics.Phaser.Scene"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];                                                  
  var defaultSceneConfig = {
      key: "",
      create: function (_scene) {
          return function (_state) {
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
      },
      init: function (_scene) {
          return function (_state) {
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
      },
      update: function (_scene) {
          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
      },
      preload: function (_scene) {
          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
      },
      state: {}
  };
  exports["defaultSceneConfig"] = defaultSceneConfig;
})(PS);
(function(exports) {
  'use strict';

  exports.addImpl = function (key, { x, y }, scene) {
    return function () {
      return scene.add.sprite(x, y, key);
    };
  };

  exports.createAnimationImpl = function (key, frames, frameRate, repeat, scene) {
    return function () {
      scene.anims.create({
        key,
        frames,
        frameRate,
        repeat,
      });

      return scene;
    };
  };

  exports.playAnimationImpl = function (key, sprite) {
    return function () {
      sprite.play(key);

      return sprite;
    };
  };

  /** https://photonstorm.github.io/phaser3-docs/Phaser.Animations.AnimationManager.html#generateFrameNumbers */
  exports.generateFrameNumbersImpl = function (key, start, end, scene) {
    return function () {
      return scene.anims.generateFrameNumbers(key, { start, end });
    };
  };

  exports.setFrameImpl = function (frame, sprite) {
    return function () {
      return sprite.setFrame(frame);
    };
  };
})(PS["Graphics.Phaser.Sprite"] = PS["Graphics.Phaser.Sprite"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Graphics.Phaser.Sprite"] = $PS["Graphics.Phaser.Sprite"] || {};
  var exports = $PS["Graphics.Phaser.Sprite"];
  var $foreign = $PS["Graphics.Phaser.Sprite"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];                    
  var setFrame = Data_Function_Uncurried.runFn2($foreign.setFrameImpl);              
  var playAnimation = Data_Function_Uncurried.runFn2($foreign.playAnimationImpl);
  var generateFrameNumbers = Data_Function_Uncurried.runFn4($foreign.generateFrameNumbersImpl);
  var createAnimation = Data_Function_Uncurried.runFn5($foreign.createAnimationImpl);
  var add = Data_Function_Uncurried.runFn3($foreign.addImpl);
  exports["add"] = add;
  exports["createAnimation"] = createAnimation;
  exports["playAnimation"] = playAnimation;
  exports["generateFrameNumbers"] = generateFrameNumbers;
  exports["setFrame"] = setFrame;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Graphics_Phaser = $PS["Graphics.Phaser"];
  var Graphics_Phaser_Loader = $PS["Graphics.Phaser.Loader"];
  var Graphics_Phaser_Scene = $PS["Graphics.Phaser.Scene"];
  var Graphics_Phaser_Sprite = $PS["Graphics.Phaser.Sprite"];                
  var ghRoot = "https://raw.githubusercontent.com/photonstorm/phaser3-examples/master/public/assets/sprites/";
  var preload = function (scene) {
      return function __do() {
          Control_Bind.bind(Effect.bindEffect)(Graphics_Phaser_Loader.loadSpritesheet("explosion")(ghRoot + "explosion.png")({
              frameWidth: 64.0,
              frameHeight: 64.0,
              startFrame: 0,
              endFrame: 23,
              margin: 0,
              spacing: 0
          })(scene))(Graphics_Phaser_Loader.loadSpritesheet("balls")(ghRoot + "balls.png")({
              frameWidth: 17.0,
              frameHeight: 17.0,
              startFrame: 0,
              endFrame: 4,
              margin: 0,
              spacing: 0
          }))();
          return Data_Unit.unit;
      };
  };
  var explodeSpriteKey = "explosion";
  var explodeAnimationKey = "explodeAnimation";
  var create = function (scene) {
      return function (_state) {
          return function __do() {
              var explosionFrames = Graphics_Phaser_Sprite.generateFrameNumbers(explodeSpriteKey)(0)(23)(scene)();
              Graphics_Phaser_Sprite.createAnimation(explodeAnimationKey)(explosionFrames)(20.0)(-1 | 0)(scene)();
              Control_Bind.bind(Effect.bindEffect)(Graphics_Phaser_Sprite.add(explodeSpriteKey)({
                  x: 100.0,
                  y: 100.0
              })(scene))(Graphics_Phaser_Sprite.playAnimation(explodeAnimationKey))();
              Control_Bind.bind(Effect.bindEffect)(Graphics_Phaser_Sprite.add("balls")({
                  x: 100.0,
                  y: 100.0
              })(scene))(Graphics_Phaser_Sprite.setFrame(3))();
              return Data_Unit.unit;
          };
      };
  };
  var mainScene = {
      key: "main",
      create: create,
      init: Graphics_Phaser_Scene.defaultSceneConfig.init,
      update: Graphics_Phaser_Scene.defaultSceneConfig.update,
      preload: preload,
      state: Graphics_Phaser_Scene.defaultSceneConfig.state
  };
  var runGame = Control_Bind.composeKleisli(Effect.bindEffect)(Graphics_Phaser.create)(Graphics_Phaser.addScene(mainScene)(true));
  var main = runGame({
      width: 800,
      height: 600
  });
  exports["ghRoot"] = ghRoot;
  exports["preload"] = preload;
  exports["main"] = main;
  exports["runGame"] = runGame;
  exports["explodeSpriteKey"] = explodeSpriteKey;
  exports["explodeAnimationKey"] = explodeAnimationKey;
  exports["create"] = create;
  exports["mainScene"] = mainScene;
})(PS);
PS["Main"].main();