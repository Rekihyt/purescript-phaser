// Generated by purs bundle 0.14.3
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];          
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];                 
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["composeKleisli"] = composeKleisli;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  exports["Functor"] = Functor;
  exports["void"] = $$void;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.runEffectFn1 = function runEffectFn1(fn) {
    return function(a) {
      return function() {
        return fn(a);
      };
    };
  };

  exports.runEffectFn2 = function runEffectFn2(fn) {
    return function(a) {
      return function(b) {
        return function() {
          return fn(a, b);
        };
      };
    };
  };

  exports.runEffectFn3 = function runEffectFn3(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function() {
            return fn(a, b, c);
          };
        };
      };
    };
  };
})(PS["Effect.Uncurried"] = PS["Effect.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Effect.Uncurried"] = $PS["Effect.Uncurried"] || {};
  var exports = $PS["Effect.Uncurried"];
  var $foreign = $PS["Effect.Uncurried"];
  exports["runEffectFn1"] = $foreign.runEffectFn1;
  exports["runEffectFn2"] = $foreign.runEffectFn2;
  exports["runEffectFn3"] = $foreign.runEffectFn3;
})(PS);
(function(exports) {
  'use strict';

  function create() {
    return new Phaser.Game();
  }

  exports.create = create;

  exports.setGameDimensionsImpl = function ({ width, height }, game) {
    game.config.width = width;
    game.config.height = height;
    return game;
  };

  exports.addSceneImpl = function (
    { key, init, create, update, preload, state },
    autoStart,
    game
  ) {
    const config = {
      init: function (data_) {
        init(this)(data_)();
      },
      preload: function () {
        preload(this)();
      },
      create: function (data_) {
        create(this)(data_)();
      },
      update: function () {
        update(this)();
      },
    };
    game.scene.add(key, config, autoStart, state);
    return game;
  };
})(PS["Graphics.Phaser"] = PS["Graphics.Phaser"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Graphics.Phaser"] = $PS["Graphics.Phaser"] || {};
  var exports = $PS["Graphics.Phaser"];
  var $foreign = $PS["Graphics.Phaser"];
  var Effect_Uncurried = $PS["Effect.Uncurried"];                
  var setGameDimensions = Effect_Uncurried.runEffectFn2($foreign.setGameDimensionsImpl);
  var addScene = Effect_Uncurried.runEffectFn3($foreign.addSceneImpl);
  exports["setGameDimensions"] = setGameDimensions;
  exports["addScene"] = addScene;
  exports["create"] = $foreign.create;
})(PS);
(function(exports) {
  'use strict';

  // https://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.Graphics.html

  exports.createImpl = function (scene) {
    return scene.add.graphics();
  };

  exports.fillStyleImpl = function (color, alpha, graphic) {
    graphic.fillStyle(color, alpha);
    return graphic;
  };

  exports.fillRectImpl = function ({ x, y }, { width, height }, graphic) {
    graphic.fillRect(x, y, width, height);
    return graphic;
  };
})(PS["Graphics.Phaser.Graphics"] = PS["Graphics.Phaser.Graphics"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Graphics.Phaser.Graphics"] = $PS["Graphics.Phaser.Graphics"] || {};
  var exports = $PS["Graphics.Phaser.Graphics"];
  var $foreign = $PS["Graphics.Phaser.Graphics"];
  var Effect_Uncurried = $PS["Effect.Uncurried"];                       
  var fillStyle = Effect_Uncurried.runEffectFn3($foreign.fillStyleImpl);
  var fillRect = Effect_Uncurried.runEffectFn3($foreign.fillRectImpl);                  
  var create = Effect_Uncurried.runEffectFn1($foreign.createImpl);
  exports["create"] = create;
  exports["fillStyle"] = fillStyle;
  exports["fillRect"] = fillRect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Graphics.Phaser.Scene"] = $PS["Graphics.Phaser.Scene"] || {};
  var exports = $PS["Graphics.Phaser.Scene"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];                                                                                 
  var defaultSceneConfig = {
      key: "",
      create: function (_scene) {
          return function (_state) {
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
      },
      init: function (_scene) {
          return function (_state) {
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
      },
      update: function (_scene) {
          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
      },
      preload: function (_scene) {
          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
      },
      state: {}
  };
  exports["defaultSceneConfig"] = defaultSceneConfig;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Graphics_Phaser = $PS["Graphics.Phaser"];
  var Graphics_Phaser_Graphics = $PS["Graphics.Phaser.Graphics"];
  var Graphics_Phaser_Scene = $PS["Graphics.Phaser.Scene"];                
  var drawRedRect = Control_Bind.composeKleisli(Effect.bindEffect)(Graphics_Phaser_Graphics.fillStyle("0xff0000")(0.5))(Graphics_Phaser_Graphics.fillRect({
      x: 250.0,
      y: 200.0
  })({
      width: 400.0,
      height: 256.0
  }));
  var drawGreenRect = Control_Bind.composeKleisli(Effect.bindEffect)(Graphics_Phaser_Graphics.fillStyle("0x00ff00")(1.0))(Graphics_Phaser_Graphics.fillRect({
      x: 100.0,
      y: 100.0
  })({
      width: 256.0,
      height: 256.0
  }));
  var create = function (scene) {
      return function (_state) {
          return Data_Functor["void"](Effect.functorEffect)(Control_Bind.bind(Effect.bindEffect)(Control_Bind.bind(Effect.bindEffect)(Graphics_Phaser_Graphics.create(scene))(drawGreenRect))(drawRedRect));
      };
  };
  var mainScene = {
      key: Graphics_Phaser_Scene.defaultSceneConfig.key,
      create: create,
      init: Graphics_Phaser_Scene.defaultSceneConfig.init,
      update: Graphics_Phaser_Scene.defaultSceneConfig.update,
      preload: Graphics_Phaser_Scene.defaultSceneConfig.preload,
      state: Graphics_Phaser_Scene.defaultSceneConfig.state
  };
  var main = Control_Bind.bind(Effect.bindEffect)(Control_Bind.bind(Effect.bindEffect)(Graphics_Phaser.create)(Graphics_Phaser.setGameDimensions({
      width: 800.0,
      height: 600.0
  })))(Graphics_Phaser.addScene(mainScene)(true));
  exports["main"] = main;
  exports["drawGreenRect"] = drawGreenRect;
  exports["drawRedRect"] = drawRedRect;
  exports["create"] = create;
  exports["mainScene"] = mainScene;
})(PS);
PS["Main"].main();