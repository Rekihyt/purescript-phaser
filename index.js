// Generated by purs bundle 0.14.0
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];          
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];                 
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];                 
  var Functor = function (map) {
      this.map = map;
  };
  exports["Functor"] = Functor;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["applicativeEffect"] = applicativeEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };
  var monadEffectEffect = new MonadEffect(function () {
      return Effect.monadEffect;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Class.Console"] = $PS["Effect.Class.Console"] || {};
  var exports = $PS["Effect.Class.Console"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var log = function (dictMonadEffect) {
      var $30 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($31) {
          return $30(Effect_Console.log($31));
      };
  };
  exports["log"] = log;
})(PS);
(function(exports) {
  'use strict';

  exports.createGame = function(config) {
    return function() {
      return new Phaser.Game(config);
    };
  };
})(PS["Graphics.Phaser"] = PS["Graphics.Phaser"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Graphics.Phaser"] = $PS["Graphics.Phaser"] || {};
  var exports = $PS["Graphics.Phaser"];
  var $foreign = $PS["Graphics.Phaser"];
  exports["createGame"] = $foreign.createGame;
})(PS);
(function(exports) {
  'use strict';

  exports.addContainer = function({x, y}) {
    return function(scene) {
      return function() {
        return scene.add.container(x, y);
      };
    };
  };

  exports.addToContainer = function(container) {
    return function(element) {
      return function() {
        container.add(element);
        return {};
      };
    };
  };
})(PS["Graphics.Phaser.Container"] = PS["Graphics.Phaser.Container"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Graphics.Phaser.Container"] = $PS["Graphics.Phaser.Container"] || {};
  var exports = $PS["Graphics.Phaser.Container"];
  var $foreign = $PS["Graphics.Phaser.Container"];
  exports["addContainer"] = $foreign.addContainer;
  exports["addToContainer"] = $foreign.addToContainer;
})(PS);
(function(exports) {
  'use strict';

  exports.addImage = function(textureKey) {
    return function({x, y}) {
      return function(scene) {
        return function() {
          return scene.add.image(x, y, textureKey);
        };
      };
    };
  };
})(PS["Graphics.Phaser.Image"] = PS["Graphics.Phaser.Image"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Graphics.Phaser.Image"] = $PS["Graphics.Phaser.Image"] || {};
  var exports = $PS["Graphics.Phaser.Image"];
  var $foreign = $PS["Graphics.Phaser.Image"];
  exports["addImage"] = $foreign.addImage;
})(PS);
(function(exports) {
  'use strict';

  exports.loadImages = function(images) {
    return function(scene) {
      return function() {
        images.forEach(({key, path}) => {
          scene.load.image(key, path);
        });
      };
    };
  };
})(PS["Graphics.Phaser.Loader"] = PS["Graphics.Phaser.Loader"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Graphics.Phaser.Loader"] = $PS["Graphics.Phaser.Loader"] || {};
  var exports = $PS["Graphics.Phaser.Loader"];
  var $foreign = $PS["Graphics.Phaser.Loader"];
  exports["loadImages"] = $foreign.loadImages;
})(PS);
(function(exports) {
  'use strict';

  exports.getSceneManager = function(game) {
    return function() {
      return game.scene;
    };
  };

  exports.addScene = function(name) {
    return function({init, create, update, preload}) {
      return function(autostart) {
        return function(sceneManager) {
          return function(data) {
            return function() {
              const config = {
                init: function(data_) {
                  init(this)(data_)();
                },
                preload: function() {
                  preload(this)();
                },
                create: function(data_) {
                  create(this)(data_)();
                },
                update: function() {
                  update(this)();
                },
              };
              sceneManager.add(name, config, autostart, data);
              return {};
            };
          };
        };
      };
    };
  };

  exports.removeScene = function(sceneManager) {
    return function(key) {
      return function() {
        sceneManager.remove(key);
        return {};
      };
    };
  };
})(PS["Graphics.Phaser.Scene"] = PS["Graphics.Phaser.Scene"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Graphics.Phaser.Scene"] = $PS["Graphics.Phaser.Scene"] || {};
  var exports = $PS["Graphics.Phaser.Scene"];
  var $foreign = $PS["Graphics.Phaser.Scene"];
  exports["addScene"] = $foreign.addScene;
  exports["getSceneManager"] = $foreign.getSceneManager;
  exports["removeScene"] = $foreign.removeScene;
})(PS);
(function(exports) {
  'use strict';

  exports.solidColorRect = function({x, y}) {
    return function({width, height}) {
      return function(color) {
        return function(scene) {
          return function() {
            const btn = scene.add.graphics();

            btn.fillStyle(color, 1);

            //btn.lineStyle(2, 0xcdc0b7, 1);

            btn.fillRect(x, y, width, height);
            return btn;
          };
        };
      };
    };
  };
})(PS["Phaser.Graphics.Rect"] = PS["Phaser.Graphics.Rect"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Phaser.Graphics.Rect"] = $PS["Phaser.Graphics.Rect"] || {};
  var exports = $PS["Phaser.Graphics.Rect"];
  var $foreign = $PS["Phaser.Graphics.Rect"];
  exports["solidColorRect"] = $foreign.solidColorRect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Class_Console = $PS["Effect.Class.Console"];
  var Graphics_Phaser = $PS["Graphics.Phaser"];
  var Graphics_Phaser_Container = $PS["Graphics.Phaser.Container"];
  var Graphics_Phaser_Image = $PS["Graphics.Phaser.Image"];
  var Graphics_Phaser_Loader = $PS["Graphics.Phaser.Loader"];
  var Graphics_Phaser_Scene = $PS["Graphics.Phaser.Scene"];
  var Phaser_Graphics_Rect = $PS["Phaser.Graphics.Rect"];                
  var testScene2 = function (sceneManager) {
      return Graphics_Phaser_Scene.addScene("testScene2")({
          init: function (v) {
              return function (v1) {
                  return Effect_Class_Console.log(Effect_Class.monadEffectEffect)("2init!");
              };
          },
          create: function (scene) {
              return function (v) {
                  return function __do() {
                      Graphics_Phaser_Image.addImage("test")({
                          x: 40.0,
                          y: 110.0
                      })(scene)();
                      Graphics_Phaser_Image.addImage("test")({
                          x: 50.0,
                          y: 120.0
                      })(scene)();
                      Graphics_Phaser_Image.addImage("test")({
                          x: 60.0,
                          y: 130.0
                      })(scene)();
                      Graphics_Phaser_Scene.removeScene(sceneManager)("testScene")();
                      return Effect_Class_Console.log(Effect_Class.monadEffectEffect)("done creating")();
                  };
              };
          },
          update: function (v) {
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          },
          preload: function (scene) {
              return Graphics_Phaser_Loader.loadImages([ {
                  key: "test",
                  path: "assets/test.png"
              } ])(scene);
          }
      })(true)(sceneManager)({});
  };
  var testScene1 = function (sceneManager) {
      return Graphics_Phaser_Scene.addScene("testScene")({
          init: function (v) {
              return function (v1) {
                  return Effect_Class_Console.log(Effect_Class.monadEffectEffect)("init!");
              };
          },
          create: function (scene) {
              return function (v) {
                  return function __do() {
                      var img = Graphics_Phaser_Image.addImage("test")({
                          x: 40.0,
                          y: 10.0
                      })(scene)();
                      var cont = Graphics_Phaser_Container.addContainer({
                          x: 100.0,
                          y: 100.0
                      })(scene)();
                      Graphics_Phaser_Container.addToContainer(cont)(img)();
                      var rec = Phaser_Graphics_Rect.solidColorRect({
                          x: 100.0,
                          y: 100.0
                      })({
                          width: 200.0,
                          height: 20.0
                      })("0x00ff00")(scene)();
                      testScene2(sceneManager)();
                      return Effect_Class_Console.log(Effect_Class.monadEffectEffect)("done creating")();
                  };
              };
          },
          update: function (v) {
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          },
          preload: function (scene) {
              return Graphics_Phaser_Loader.loadImages([ {
                  key: "test",
                  path: "assets/test.png"
              } ])(scene);
          }
      })(true)(sceneManager)({});
  };
  var main = function __do() {
      var game = Graphics_Phaser.createGame({
          width: 400,
          height: 400
      })();
      var sceneManager = Graphics_Phaser_Scene.getSceneManager(game)();
      var scene = testScene1(sceneManager)();
      return Effect_Class_Console.log(Effect_Class.monadEffectEffect)("done!")();
  };
  exports["main"] = main;
  exports["testScene1"] = testScene1;
  exports["testScene2"] = testScene2;
})(PS);
PS["Main"].main();